\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces A robot located to the left of a 1D occupancy grid map $r_l$ composed of $n_{r,l}=6$ grid cells in four cases. In each case, cells the first three cells are free, the fourth cell is occupied, and the fifth and sixth cells may or may not be occupied. All above outcomes correspond to the event $\mathbf {r}_{l,4+}$.\relax }}{17}{figure.caption.14}
\contentsline {figure}{\numberline {2.2}{\ignorespaces This simple 2D example illustrates how ray casting determines the cells that compose the reduced map for the inverse sensor model. The closest edges are used to determine which cells should be considered, and in what order. The complete map cell indices are temporarily saved as well, which are used to associate probabilities to cells of the reduced map.\relax }}{18}{figure.caption.15}
\contentsline {figure}{\numberline {2.3}{\ignorespaces Using experimental sensor data, the map was generated using an approximate and the proposed exact inverse sensor models. The laser sensor and odometry data used for the experiment was provided by University of Pennsylvania open course robotics estimation and learning on Coursera\nobreakspace {}\cite {coursera}.\relax }}{28}{figure.caption.20}
\contentsline {figure}{\numberline {2.4}{\ignorespaces The entropy is compared between the approximate and proposed exact inverse sensor models at step 2280. The blue areas show the lowest entropy while red shows highest.\relax }}{29}{figure.caption.21}
\contentsline {figure}{\numberline {2.5}{\ignorespaces The map entropies of the approximate inverse sensor model (blue) and the proposed exact inverse sensor model (red) show that the exact version yields a more certain occupancy grid map.\relax }}{30}{figure.caption.22}
\contentsline {figure}{\numberline {2.6}{\ignorespaces A robot (green crossed circle, green curve of its previous $13$ seconds) measures a room with a Kinect depth sensor. The exact inverse sensor model is compared with an approximate algorithm designed for the Kinect depth sensor. Grid cells are either known as free (white) or occupied (black), or uncertain with a grayscale color. \relax }}{31}{figure.caption.24}
\contentsline {figure}{\numberline {2.7}{\ignorespaces Entropy serves as a measure of uncertainty of the occupancy grid, where more blue regions are more certain, and red regions are more uncertain. The uncertainty is always less when the exact solution is applied.\relax }}{32}{figure.caption.25}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces The entropy error is decreased at the cost of increasing computation time in this Monte Carlo 1D measurement ray expected entropy case.\relax }}{39}{figure.caption.28}
\contentsline {figure}{\numberline {3.2}{\ignorespaces This figure illustrates the expanding ring method. Initially, a robot (blue circle) views down and left (blue sector). Then, the robot considers $n_c=8$ poses (red circles) as possible candidates for where to move next. For each candidate, $n_d=8$ directions are considered (red lines, only displayed on candidate location $c=2$). Then, the expected entropy of each ray is calculated. The scan (red sector) covering those rays with the largest expected entropy decrease is chosen for each candidate, and the best candidate $X_c^*$ (black circle: location, black sector: scan) is chosen to maximize information gain. Finally, Dijkstra's algorithm provides the collision-free motion between $X_t$ and $X_c^*$, and the process is repeated. \relax }}{43}{figure.caption.32}
\contentsline {figure}{\numberline {3.3}{\ignorespaces A robot (green circle, green marker of previous path) measures a room with a Kinect depth sensor to maximize map information gain.\relax }}{45}{figure.caption.35}
\contentsline {figure}{\numberline {3.4}{\ignorespaces Intel Research Lab floor plan benchmark\nobreakspace {}\cite {kummerle2009measuring}.\relax }}{47}{figure.caption.36}
\contentsline {figure}{\numberline {3.5}{\ignorespaces A robot (green) measures a room in the ROS Stage simulator using the Intel Research Lab floor plan. The exact inverse sensor model is used for the autonomous exploration algorithm.\relax }}{48}{figure.caption.37}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces Simulated 3D Occupancy Grid Map\relax }}{57}{figure.caption.42}
\contentsline {figure}{\numberline {4.2}{\ignorespaces Simulated Environment and 2D Projected Maps at $4$ min\relax }}{58}{figure.caption.43}
\contentsline {figure}{\numberline {4.3}{\ignorespaces Simulated Environment Map Entropy\relax }}{58}{figure.caption.44}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {5.1}{\ignorespaces The bump function is designed to promote travel distances close to $d_\text {opt}$ by multiplying this function by the expected information gain objective. Travel distances less than $d_\text {opt}$ are below the robot capabilities. Travel distances beyond $d_\text {opt}$ are beyond what the robot can reach within the minimum exploration computation time.\relax }}{62}{figure.caption.45}
\contentsline {figure}{\numberline {5.2}{\ignorespaces The SEH second floor plan (about $15,000$ sqft) is reconstructed with a Gazebo simulation environment.\relax }}{70}{figure.caption.48}
\contentsline {figure}{\numberline {5.3}{\ignorespaces 3D Occupancy Grid Map of SEH Second Floor\relax }}{71}{figure.caption.49}
\contentsline {figure}{\numberline {5.4}{\ignorespaces 2D Projected Occupancy Grid Map of SEH Second Floor\relax }}{72}{figure.caption.50}
\contentsline {figure}{\numberline {5.5}{\ignorespaces Total 3D Map Cell Entropy\relax }}{73}{figure.caption.51}
\contentsline {figure}{\numberline {5.6}{\ignorespaces The continuous-time Markov process for a single binary cell occupancy is illustrated. As time progresses, this process degrades the cell slowly toward $P_\infty .$\relax }}{74}{figure.caption.52}
\contentsline {figure}{\numberline {5.7}{\ignorespaces The rate at which probabilities converge toward $P_\infty =0.4$ increases based on the difference magnitude of their initial values.\relax }}{75}{figure.caption.53}
\contentsline {figure}{\numberline {5.8}{\ignorespaces The 3D occupancy grid map representation of the SEH second floor is shown during patrol. The robots generate these maps while avoiding collisions with each other, the environment, and a non-cooperative human.\relax }}{78}{figure.caption.56}
\contentsline {figure}{\numberline {5.9}{\ignorespaces The 2D projected map from of the SEH second floor shows degradation while robots patrol the space. The robots evade the non-cooperative human walking in a rectangular pattern, occasionally capturing the temporarily-occupied space and identifying these cells as occupied on the grid.\relax }}{79}{figure.caption.57}
\contentsline {figure}{\numberline {5.10}{\ignorespaces Total map entropies are tracked for separate trials: patrol of the building for $15$ minutes (blue) and patrol of the building for $9$ minutes, then hover (red). Even though the map is fairly well-known after $9$ minutes in either case, the continuous effort of patrolling over the complete time period shows lower map uncertainty beyond this time as cells are constantly degrading.\relax }}{80}{figure.caption.58}
\contentsline {figure}{\numberline {5.11}{\ignorespaces A cooperating robot must evade a non-cooperative human. The receding horizon framework allows a quickly-updating map to modify the exploration commands to avoid collisions with a dynamic obstacle.\relax }}{80}{figure.caption.59}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {6.1}{\ignorespaces The three frames are shown with three axes (red: first axis, green: second axis, blue: third axis). The Mars frame (short and thick) is fixed to the planet. The body-fixed frame (medium thickness and length) is fixed to the camera frame (long and narrow). The rotation of $\psi $ (b) represents the fixed camera yaw rotation and $\theta $ (c) represents the downward angle of the camera to capture the surface of Mars below the flying robot.\relax }}{83}{figure.caption.60}
\contentsline {figure}{\numberline {6.2}{\ignorespaces The bump function is multiplied to the objective function of (\ref {eqn:CandidateLocationOptimization}) to prioritize local trajectories to avoid traversals across the map, where travel costs are determined using Dijkstra's algorithm. However, there is no time wasted up to $d_\text {opt}$ because this distance may be achieved in the minimum exploration computation time.\relax }}{86}{figure.caption.61}
\contentsline {figure}{\numberline {6.3}{\ignorespaces The height map (a) and color map (b) are combined in the Gazebo simulator (c) to model a Mars environment. The robot captures the simulated environment to generate an occupancy grid map.\relax }}{87}{figure.caption.62}
\contentsline {figure}{\numberline {6.4}{\ignorespaces In Case 1, the robot (red disk with arrow indicating laser direction) moves toward candidate poses (red arrows, more opaque for greater reward) based on expected entropy change of the 3D probabilistic occupancy grid map $m$ (cubes: greater opacity for greater occupancy probability) of the surface of Mars.\relax }}{90}{figure.caption.63}
\contentsline {figure}{\numberline {6.5}{\ignorespaces In Case 2, the robot (red disk with arrow indicating laser direction) generates a 3D probabilistic occupancy grid map $m$ (cubes: greater opacity for greater occupancy probability), which is used to generate a reduced map $m_\text {reduced}$ based on (\ref {eqn:Proj3DMapComb}). The robot moves toward candidate poses (red arrows, more opaque for greater reward) based on expected entropy change of $m_\text {reduced}$. Using $m_\text {reduced}$ instead of $m$ for entropy calculation leads to faster exploration of new terrain, but this leaves some grid cells missing.\relax }}{91}{figure.caption.64}
\contentsline {figure}{\numberline {6.6}{\ignorespaces The close-up images from the Case 2 trial show the candidate future poses (red arrows), where greater opacity represents a larger objective function of (\ref {eqn:CandidateLocationOptimization}). In (a), we show the 3D scan with color corresponding to the surface of Mars. In (b), we overlay the full map $m$ (colored) with the reduced map $m_\text {reduced}$ (gray) from (\ref {eqn:Proj3DMapComb}).\relax }}{92}{figure.caption.65}
\contentsline {figure}{\numberline {6.7}{\ignorespaces The complete map entropy for Case 1 (red solid line) decreases at roughly the same rate as the reduced map entropy for Case 2 (dashed blue line) toward the beginning. However, the expected entropy in Case 2 promotes actions toward unexplored territory, while the policy of Case 1 yields a more complete map before moving on to unexplored spaces.\relax }}{93}{figure.caption.66}
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
